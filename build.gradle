plugins {
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id "au.com.dius.pact" version "4.1.0"
}

repositories {
    mavenCentral()
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'au.com.dius.pact'

    group 'set-app'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 17

    repositories {
        mavenCentral()
        maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
    }

    ext {
        set('springCloudVersion', "2022.0.1")
        set('feignVersion', "11.0")
        set('lombokVersion', "1.18.22")
        set('jacksonVersion', "2.14.2")
        set('pactVersion', "4.0.10")
        set('okhttpVersion', "5.0.0-alpha.11")
        set('springRetryVersion', "1.2.4.RELEASE")
        set('groovyVersion', "4.0.0")
        set('netflixRibbonVersion', "2.2.10.RELEASE")
    }

    dependencies {

        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-aop"

        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        implementation "org.springframework.cloud:spring-cloud-starter-config"
        implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
        implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
        implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
        implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon:${netflixRibbonVersion}"

        implementation "com.h2database:h2"
        implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
        implementation "org.springframework.retry:spring-retry:${springRetryVersion}"
        implementation "org.apache.groovy:groovy:${groovyVersion}"
        /*implementation "io.github.openfeign:feign-jackson:${feignVersion}"
        implementation "io.github.openfeign:feign-httpclient"
        implementation "io.github.openfeign:feign-okhttp"
        testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.1"*/
        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"


        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation "au.com.dius:pact-jvm-provider-junit5:${pactVersion}"
        testImplementation "au.com.dius:pact-jvm-consumer-junit5:${pactVersion}"
        testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"
        testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
        testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
        testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
        reports {
            html.enabled true
            junitXml.enabled = true
        }
    }

    sourceSets {
        component {
            java.srcDir "$projectDir/src/component/java"
            resources.srcDir "$projectDir/src/component/resources"
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        integration {
            java.srcDir "$projectDir/src/integration/java"
            resources.srcDir "$projectDir/src/integration/resources"
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    configurations {
        componentImplementation.extendsFrom testImplementation
        componentRuntime.extendsFrom testRuntime
        integrationImplementation.extendsFrom testImplementation
        integrationRuntime.extendsFrom testRuntime
    }

    task componentTest(type: Test) {
        testClassesDirs = sourceSets.component.output.classesDirs
        classpath = sourceSets.component.runtimeClasspath
        useJUnitPlatform()
        reports {
            html.enabled true
            junitXml.enabled = true
        }
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integration.output.classesDirs
        classpath = sourceSets.integration.runtimeClasspath
        useJUnitPlatform()
        reports {
            html.enabled true
            junitXml.enabled = true
        }
    }

    check.dependsOn componentTest
    check.dependsOn integrationTest

    task runBootJar(dependsOn: bootJar) {}

    pact {
        publish {
            def path = "${project.projectDir}"
            pactDirectory = path + '/pacts'
            pactBrokerUrl = 'http://127.0.0.1:8282'
        }
    }
}
